"""# !BBT vendor: Check imaging vendor

This vendor handles check imaging for deposit into agnecy accounts

@author: Adam Prost, Sean O'Rear
@contact: adam@iws-web.com, sean@iws-web.com
@organization: IWS

BB&T
@Technical Contact: Tom Bittenbinder - tbittenbinder@bbandt.com
@Implementation Contact: Jerrilynn Spearman - jbspearman@bbandt.com
"""

import os
import re

from iwslib.toolbox import get_config, HAL, to_dec

CONFIG = get_config(os.path.join(os.path.dirname(__file__),
                         os.pardir, os.pardir, 'britecore.cfg'))

class BBT(object):
    """Allows upload of payments receivable files into BC"""
    def upload_payments(self, file_data):
        from payments import PaymentController
        pc = PaymentController()

        hal = HAL(CONFIG)

        active_policies = {}
        [active_policies.update({re.sub('([^A-Za-z0-9]+|^0+)', '', policy['policyNumber']): policy['id']})
                                for policy in hal.execsql('''SELECT `id`, `policyNumber`
                                                             FROM `policies`
                                                             WHERE `active` = 1''', fetchall=True)
                                if policy['policyNumber']]
        results = {'successful': [],
                   'unsuccessful': []}

        for transaction in file_data[1:]:
            bbt_policy_number = re.sub('^0+', '', transaction[0:15])
            amount = to_dec(transaction[15:40])
            check_number = to_dec(transaction[40:55]).to_integral()
            check_number = check_number.to_eng_string() if check_number else 'N/A'

            policy_id = active_policies.get(bbt_policy_number, None)

            if not policy_id:
                results['unsuccessful'].append({'policyNumber': bbt_policy_number,
                                                'amount': str(amount)})
                continue

            else:
                #Build the json_dict to pass to accounting.py->store_payment
                policy_number = hal.execsql('''SELECT `policyNumber`
                                               FROM `policies`
                                               WHERE `id` = %s''', policy_id, fetchall=False)['policyNumber']

#                 paymentMethod = {"accountName": "Check", "maskedNumber": check_number}
#                 create_payment = Manager().manual_payment(paymentMethod, policy_number, amount, 'Sale', 'upload')

                create_payment = pc.make_payment('Check', [policy_number], amount, masked_number=check_number)

                if not create_payment.get('success'):
                    results['unsuccessful'].append({'policyNumber': bbt_policy_number,
                                                'amount': str(amount) + ' Duplicate Payment'})
                else:
                    results['successful'].append(create_payment)

        return results
